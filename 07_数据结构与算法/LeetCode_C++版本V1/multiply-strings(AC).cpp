// 1CE, 1AC, nice performanceclass Solution {public:    string multiply(string num1, string num2) {        // IMPORTANT: Please reset any member data you declared, as        // the same Solution instance will be reused for each test case.        if(num1 == "0" || num2 == "0"){            return "0";        }                int *a1, *a2, *a3;        int max_len, n;        char *buf;        max_len = num1.length() + num2.length() + 5;        a1 = new int[max_len];        a2 = new int[max_len];        a3 = new int[max_len];        buf = new char[max_len];        // 1CE here, declaration for $j missing        int i, j;                for(i = 0; i < max_len; ++i){            a1[i] = a2[i] = a3[i] = 0;            buf[i] = 0;        }                n = num1.length();        for(i = 0; i <= n - 1; ++i){            a1[n - 1 - i] = num1[i] - '0';        }                n = num2.length();        for(i = 0; i <= n - 1; ++i){            a2[n - 1 - i] = num2[i] - '0';        }                for(i = 0; i < max_len; ++i){            if(a1[i] == 0){                continue;            }            for(j = 0; i + j < max_len; ++j){                a3[i + j] += a1[i] * a2[j];            }        }                for(i = 0; i < max_len - 1; ++i){            a3[i + 1] += a3[i] / 10;            a3[i] %= 10;        }        a3[max_len - 1] %= 10;        i = max_len - 1;        while(i >=0 && a3[i] == 0){            --i;        }                if(i < 0){            sprintf(buf, "0");        }else{            j = 0;            while(i >= 0){                buf[j++] = a3[i--] + '0';            }        }                string res = string(buf);                delete[] a1;        delete[] a2;        delete[] a3;        delete[] buf;        return res;    }};