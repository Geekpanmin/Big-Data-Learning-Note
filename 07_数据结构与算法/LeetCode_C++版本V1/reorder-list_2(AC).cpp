// 2WA, 1AC, not so satisfactoryclass Solution {public:    void reorderList(ListNode *head) {        if(head == nullptr){            return;        }                int n, n1, n2;        ListNode *h1, *h2, *ptr;                h1 = head;        ptr = head;        n = 0;        while(ptr != nullptr){            ++n;            ptr = ptr->next;        }        n1 = (n + 1) / 2;        n2 = n - n1;        ptr = head;        for(int i = 1; i < n1; ++i){            ptr = ptr->next;        }        h2 = ptr->next;        ptr->next = nullptr;        h2 = reverseList(h2);                ListNode *tail;        ListNode *p1, *p2;        tail = nullptr;        head = h1;        while(h1 != nullptr || h2 != nullptr){            if(h1 != nullptr){                if(tail != nullptr){                    tail->next = h1;                    tail = tail->next;                }else{                    tail = h1;                }                h1 = h1->next;                tail->next = nullptr;            }            if(h2 != nullptr){                if(tail != nullptr){                    tail->next = h2;                    tail = tail->next;                }else{                    tail = h2;                }                h2 = h2->next;                tail->next = nullptr;            }        }    }private:    ListNode *reverseList(ListNode *head) {        if(nullptr == head){            return head;        }                ListNode *ptr1, *ptr2;                ptr1 = head;        head = nullptr;        while(ptr1 != nullptr){            ptr2 = ptr1;            ptr1 = ptr1->next;            if(head != nullptr){                // 2WA here, better manually debug it before submission                ptr2->next = head;                head = ptr2;            }else{                head = ptr2;                ptr2->next = nullptr;            }        }                return head;    }};