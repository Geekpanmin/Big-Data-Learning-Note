// 1TLE, 1WA, 1AC, still not careful enough~class Solution {public:    vector<int> spiralOrder(vector<vector<int> > &matrix) {        // IMPORTANT: Please reset any member data you declared, as        // the same Solution instance will be reused for each test case.        int x, y, x1, y1;        int dir;        int m, n;        int **a;        int i, j;        int cc;                result.clear();        m = matrix.size();        if(m <= 0){            return result;        }        n = matrix[0].size();        if(n <= 0){            return result;        }                a = new int*[m];        for(i = 0; i < m; ++i){            a[i] = new int[n];        }        for(i = 0; i < m; ++i){            for(j = 0; j < n; ++j){                a[i][j] = 0;            }        }        cc = m * n;                x = y = 0;        dir = 0;        // 1TLE here, must check $cc immediately after push_back()        while(true){            a[x][y] = 1;            // 1WA here, it's $matrix[x][y], not $a[x][y]            result.push_back(matrix[x][y]);            --cc;            if(cc <= 0){                break;            }            while(true){                x1 = x + dd[dir][0];                y1 = y + dd[dir][1];                if(                    (x1 < 0 || x1 > m - 1) ||                    (y1 < 0 || y1 > n - 1) ||                    a[x1][y1] == 1                ){                    dir = (dir + 1) % 4;                }else{                    x = x1;                    y = y1;                    break;                }            }        }                for(i = 0; i < m; ++i){            delete[] a[i];        }        delete[] a;                return result;    }private:    int dd[4][2] = {        {0, 1}, {1, 0}, {0, -1}, {-1, 0}    };    vector<int> result;};